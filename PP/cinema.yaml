openapi: 3.0.3
info:
  title: Cinema Service - OpenAPI 3.0
  description: |-
    This is a sample Cinema Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: films
    description: Make actions with films 
  - name: schedule
    description: Draw up schedule for films 
  - name: visiting
    description: How many people visit a cinema
  - name: sessions
    description: Movie sessions and showing time
  - name: User
    description: Do operations with users
paths:
  /films:
    put:
      tags:
        - films
      summary: Update an existing film
      description: Update an existing film by Id
      operationId: updateFilm
      requestBody:
        description: Update an existent film in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Films'
          application/xml:
            schema:
              $ref: '#/components/schemas/Films'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Films'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Films'
        '400':
          description: Invalid ID supplied
        '404':
          description: Film not found
        '405':
          description: Validation exception
      security:
        - adminAuth: []
    post:
      tags:
        - films
      summary: Add a film
      description: Add a film to the store
      operationId: addFilm
      requestBody:
        description: Create a film in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Films'
          application/xml:
            schema:
              $ref: '#/components/schemas/Films'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Films'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Films'
        '405':
          description: Invalid input
      security:
        - adminAuth: []
  /films/findByStatus:
    get:
      tags:
        - films
      summary: Finds Films by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findFilmsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - finished
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'
        '400':
          description: Invalid status value
      security:
        - adminAuth: []
  /films/findByTags:
    get:
      tags:
        - films
      summary: Finds Films by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findFilmsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'
        '400':
          description: Invalid tag value
      security:
        - adminAuth: []
  /films/{filmId}:
    get:
      tags:
        - films
      summary: Find film by ID
      description: Returns a film
      operationId: getFilmById
      parameters:
        - name: filmId
          in: path
          description: ID of film to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Films'
        '400':
          description: Invalid ID supplied
        '404':
          description: Film not found
      security:
        - adminAuth: []
    delete:
      tags:
        - films
      summary: Deletes a film
      description: delete a film
      operationId: deleteFilm
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: filmId
          in: path
          description: Film id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid film value
      security:
        - adminAuth: []

  /schedule:
    post:
      tags:
        - schedule
      summary: Make a new schedule
      description: Make a new schedule
      operationId: makeSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schedule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '405':
          description: Invalid input
      security:
        - adminAuth: []
    get:
      tags:
        - schedule
      summary: Returns schedules
      description: Returns schedules
      operationId: getSchedule
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
      security:
        - adminAuth: []
  /schedule/{scheduleId}:
    get:
      tags:
        - schedule
      summary: Find schedule by ID
      description: Find schedule by ID
      operationId: getSheduleById
      parameters:
        - name: scheduleId
          in: path
          description: ID of schedule that needs to be looked for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid ID supplied
        '404':
          description: Schedule with films not found
      security:
        - adminAuth: []
    delete:
      tags:
        - schedule
      summary: Delete schedule of films by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteSchedule
      parameters:
        - name: scheduleId
          in: path
          description: ID of the schedule with films that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Schedule not found

  /visiting:
    post:
      tags:
        - visiting
      summary: Add a new visiting with every session
      description: Add a visiting
      operationId: addVisiting
      requestBody:
        description: Create a new visiting
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visiting'
          application/xml:
            schema:
              $ref: '#/components/schemas/Visiting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Visiting'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visiting'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Visiting'
        '405':
          description: Invalid input
      security:
        - adminAuth: []
    get:
      tags:
        - visiting
      summary: Returns visiting from sessions
      description: Returns visiting
      operationId: getVisiting
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visiting'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visiting'
      security:
        - adminAuth: []
  /visiting/{visitingId}:
    get:
      tags:
        - visiting
      summary: Find visiting of session by ID
      description: Find visiting by ID
      operationId: getVisitingById
      parameters:
        - name: visitingId
          in: path
          description: ID of visiting that needs to be looked for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visiting'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Visiting'
        '400':
          description: Invalid ID supplied
        '404':
          description: Visiting session not found
      security:
        - adminAuth: []
    delete:
      tags:
        - visiting
      summary: Delete visiting session by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteVisiting
      parameters:
        - name: visitingId
          in: path
          description: ID of the visiting session that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Visiting not found
      security:
        - adminAuth: []

  /sessions:
    post:
      tags:
        - sessions
      summary: Add a session
      description: Add a session
      operationId: addSession
      requestBody:
        description: Create a session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sessions'
          application/xml:
            schema:
              $ref: '#/components/schemas/Sessions'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sessions'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sessions'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Sessions'
        '405':
          description: Invalid input
      security:
        - adminAuth: []
  /sessions/{sessionsId}:          
    get:
      tags:
        - sessions
      summary: Find session showtime by ID
      description: Find session showtime by ID
      operationId: getShowtimeById
      parameters:
        - name: sessionsId
          in: path
          description: ID of schedule that needs to be looked for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid ID supplied
        '404':
          description: Schedule with films not found
      security:
        - adminAuth: []
    delete:
      tags:
        - sessions
      summary: Delete session showtime of films by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteSession
      parameters:
        - name: sessionsId
          in: path
          description: ID of the session showtime that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Session showtime not found 
      security:
        - adminAuth: []
  /user:
    post:
      summary: create user
      tags:
        - User
      operationId: create_user
      description: everyone can create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_user"
            example:
              firstname: Joel
              lastname: Miller
              email: qwerty123@gmail.com
              password: '12345'
              role: customer
      responses:
        '200':
          description: the film was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_user"
              example:
                user_id: 10
                firstname: Joel
                lastname: Miller
                email: qwerty123@gmail.com
                password: '12345'
                role: admin
        '400':
          description: creation error
  /user/{user_id}: 
    put:
      summary: Update user
      tags:
        - User
      description: Update an existing user by Id
      operationId: update_user
      requestBody:
        description: Update an existing user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
          application/xml:
            schema:
              $ref: '#/components/schemas/user'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'          
            application/xml:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      security:
        - adminAuth: []
    get:
      summary: get user
      tags:
        - User
      operationId: get_user
      description: information about the user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user was received successfully
        '400':
          description: user is not available
      security:
        - adminAuth: []
    delete:
      summary: delete user
      tags:
        - User
      operationId: delete_user
      description: removing the user from the site
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user was received successfully
        '400':
          description: user is not available
      security:
        - adminAuth: []
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    user:
      type: object
      required:
        - user_id
        - firstname
        - lastname
        - email
        - password
        - role
      properties:
        user_id: 
          type: integer
          example: 1
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Tyle
        email:
          type: string
          example: qwerty123@gmail.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          enum:
            - admin
            - customer
    create_user:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
        - role
      properties:
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Patron
        email:
          type: string
          example: qwerty123@gmail.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          enum:
            - admin
            - customer
    get_user:
      type: object
      required:
        - firstname
        - lastname
        - email
        - role
      properties:
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Patron
        email:
          type: string
          example: qwerty123@gmail.com
        role:
          type: string
          enum:
            - admin
            - customer
    Films:
      required:
        - id
        - name
        - genre
        - duration
        - rating
        - release date
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          items:
            $ref: '#/components/schemas/Schedule'
        name:
          type: string
          example: fehguy
        genre:
          type: string
          example: fehguy
        duration:
          type: integer
          format: float 64
          example: 1.50
        rating:
          type: integer
          format: float 64
          example: 4.5
        release date:
          type: string
          format: date-time
      xml:
        name: films
    Schedule:
      required:
        - id
        - number of movies
        - films
        - whoupdate
        - people
      type: object
      properties:
         id:
          type: integer
          format: int64
          example: 10
         films:
          type: string
          enum:
            - film1
            - film2
            - film3
          items:
            $ref: '#/components/schemas/Films'
         whoupdate:
          type: string
          enum:
            - admin1
            - admin2
            - admin3
          items:
            $ref: '#/components/schemas/user'
         people:
          type: string
          enum:
            - admin1
            - admin2
            - admin3
          items:
            $ref: '#/components/schemas/Visiting'
         number of movies:
          type: integer
          format: int
          example: 10
      xml:
        name: schedule    
    Visiting:
      required:
        - id
        - number of people
        - number of visiting
      type: object
      properties:
         id:
          type: integer
          format: int64
          example: 10
          items:
            $ref: '#/components/schemas/Schedule'
         number of people:
          type: integer
          format: int
          example: 10 
          items:
           $ref: "#/components/schemas/get_user"
         number of visiting:
          type: integer
          format: int
          example: 10 
      xml:
        name: visiting    
    Sessions:
      required:
        - id
        - showtime
        - number of sessions
      type: object
      properties:
         id:
          type: integer
          format: int64
          example: 10
          items:
            $ref: '#/components/schemas/Schedule'
         showtime:
          type: integer
          format: float 64
          example: 1.50
          items:
            $ref: '#/components/schemas/Sessions'
         number of sessions:
          type: integer
          format: int
          example: 10 
      xml:
        name: sessions
  requestBodies:
    Films:
      description: Film that needs to be added to cinema
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Films'
        application/xml:
          schema:
            $ref: '#/components/schemas/Films'
  securitySchemes:
    adminAuth:
      description: authentification
      type: apiKey
      name: api_Key
      in: cookie
    api_key:
      type: apiKey
      name: api_key
      in: header          












